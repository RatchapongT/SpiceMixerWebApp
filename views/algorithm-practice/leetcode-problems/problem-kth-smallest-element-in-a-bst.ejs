<p></p>
<p>Given a binary search tree, write a function <code>kthSmallest</code>
    to find the <b>k</b>th smallest element in it.
</p>
<p><b>Note: </b><br> You
    may assume k is always valid, 1 ≤ k ≤ BST's total elements.
</p>
<p><b>Follow
        up:</b><br> What if the BST is modified (insert/delete operations) often
    and you need to find the kth
    smallest frequently? How would you optimize the kthSmallest routine?
</p>
<ol id = "hints">
    <li class = "hint">Try to utilize the property of a BST.</li>
    <li class = "hint">What if you could modify the BST node's structure?</li>
    <li class = "hint">The optimal runtime complexity is O(height of BST).</li>
</ol>
<p><b>Credits:</b><br>Special thanks to
    <a href = "https://leetcode.com/discuss/user/ts">@ts</a> for adding this
    problem
    and creating all test cases.
</p>
<p></p>
<div>
    <p><a href = "/subscribe/">Subscribe</a> to see which companies asked this
        question
    </p>
</div>
<div>
    <div id = "tags" class = "btn btn-xs btn-warning">
        Show Tags
    </div>
    <span class = "hidebutton"> <a class = "btn btn-xs btn-primary" href = "/tag/tree/">Tree</a> <a class = "btn btn-xs btn-primary" href = "/tag/binary-search/">Binary
            Search</a> </span>
</div>
<div>
    <div id = "similar" class = "btn btn-xs btn-warning">
        Show Similar Problems
    </div>
    <span class = "hidebutton"> <a class = "btn btn-xs btn-primary" href = "/problems/binary-tree-inorder-traversal/">
            (M)
            Binary Tree Inorder Traversal</a> </span>
</div>