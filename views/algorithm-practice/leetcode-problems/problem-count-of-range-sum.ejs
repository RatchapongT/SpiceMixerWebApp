<p></p>
<p> Given an integer array <code>nums</code>, return the number of range
    sums that lie in <code>[lower, upper]</code>
    inclusive.<br> Range sum <code>S(i, j)</code> is defined as the sum of the
    elements in <code>nums</code> between
    indices <code>i</code> and <code>j</code> (<code>i</code> â‰¤ <code>j</code>),
    inclusive.
</p>
<p><b>Note:</b><br> A naive algorithm of
    <i>O</i>(<i>n</i><sup>2</sup>) is trivial. You MUST do better than that.
</p>
<p><b>Example:</b><br> Given <i>nums</i> = <code>[-2, 5, -1]</code>,
    <i>lower</i>
    = <code>-2</code>, <i>upper</i> =
    <code>2</code>,<br> Return <code>3</code>.<br> The three ranges are : <code>[0, 0]</code>,
    <code>[2, 2]</code>,
    <code>[0, 2]</code> and their respective sums are: <code>-2, -1, 2</code>.
</p>
<p><b>Credits:</b><br>Special thanks to
    <a href = "https://leetcode.com/discuss/user/dietpepsi">@dietpepsi</a> for
    adding
    this problem and creating all test cases.
</p>
<p></p>
<div>
    <p><a href = "/subscribe/">Subscribe</a> to see which companies asked this
        question
    </p>
</div>
<div>
    <div id = "tags" class = "btn btn-xs btn-warning">
        Show Tags
    </div>
    <span class = "hidebutton"> <a class = "btn btn-xs btn-primary" href = "/tag/divide-and-conquer/">Divide
            and Conquer</a>
        <a class = "btn btn-xs btn-primary" href = "/tag/binary-search-tree/">Binary
            Search Tree</a> </span>
</div>
<div>
    <div id = "similar" class = "btn btn-xs btn-warning">
        Show Similar Problems
    </div>
    <span class = "hidebutton"> <a class = "btn btn-xs btn-primary" href = "/problems/count-of-smaller-numbers-after-self/">
            (H) Count of Smaller Numbers After Self</a> </span>
</div>