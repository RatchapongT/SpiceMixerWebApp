<p></p>
<p> Given a binary tree</p>
<pre>
    struct TreeLinkNode {
    TreeLinkNode *left;
    TreeLinkNode *right;
    TreeLinkNode *next;
    }
</pre>
<p></p>
<p>Populate each next pointer to point to its next right node. If
    there is no next right node, the next pointer should
    be set to <code>NULL</code>.
</p>
<p>Initially, all next pointers are set to
    <code>NULL</code>.
</p>
<p><b>Note:</b></p>
<ul>
    <li>You may only use constant extra space.</li>
    <li>You may assume that it is a perfect binary tree (ie, all leaves are at
        the same level, and every parent has two
        children).
    </li>
</ul>
<p></p>
<p> For example,<br> Given the following perfect binary tree,<br>
</p>
<pre>
    1
    / \
    2 3
    / \ / \
    4 5 6 7
</pre>
<p></p>
<p> After calling your function, the tree should look like:<br></p>
<pre>
    1 -&gt; NULL
    / \
    2 -&gt; 3 -&gt; NULL
    / \ / \
    4-&gt;5-&gt;6-&gt;7 -&gt; NULL
</pre>
<p></p>
<p></p>
<div>
    <p><a href = "/subscribe/">Subscribe</a> to see which companies asked this
        question
    </p>
</div>
<div>
    <div id = "tags" class = "btn btn-xs btn-warning">
        Show Tags
    </div>
    <span class = "hidebutton"> <a class = "btn btn-xs btn-primary" href = "/tag/tree/">Tree</a> <a class = "btn btn-xs btn-primary" href = "/tag/depth-first-search/">Depth-first
            Search</a> </span>
</div>
<div>
    <div id = "similar" class = "btn btn-xs btn-warning">
        Show Similar Problems
    </div>
    <span class = "hidebutton"> <a class = "btn btn-xs btn-primary" href = "/problems/populating-next-right-pointers-in-each-node-ii/">
            (H) Populating Next
            Right Pointers in Each Node
            II</a> <a class = "btn btn-xs btn-primary" href = "/problems/binary-tree-right-side-view/">
            (M) Binary Tree Right
            Side View</a> </span>
</div>