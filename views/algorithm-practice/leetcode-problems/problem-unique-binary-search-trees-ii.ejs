<p></p>
<p>Given <i>n</i>, generate all structurally unique <b>BST's</b> (binary
    search trees) that store values 1...<i>n</i>.
</p>
<p> For example,<br> Given
    <i>n</i> = 3, your program should return all 5 unique BST's shown below.
</p>
<pre>
    1 3 3 2 1
    \ / / / \ \
    3 2 1 1 3 2
    / / \ \
    2 1 2 3
</pre>
<p></p>
<p class = "showspoilers">confused what <code>"{1,#,2,3}"</code>
    means? <a href = "#" onclick = "showSpoilers(this); return false;">
        &gt; read more on how binary tree is serialized on OJ.</a></p>
<div class = "spoilers">
    <br>
    <b>OJ's Binary Tree Serialization:</b>

    <p> The serialization of a binary tree follows a level order traversal,
        where '#' signifies a path terminator where
        no node exists below.
    </p>

    <p> Here's an example:<br></p>
    <pre>
        1
        / \
        2 3
        /
        4
        \
        5
    </pre>
    The above binary tree is serialized as
    <code>"{1,2,3,#,#,4,#,#,5}"</code>.
    <p></p>
</div>
<p></p>
<div>
    <p><a href = "/subscribe/">Subscribe</a> to see which companies asked this
        question
    </p>
</div>
<div>
    <div id = "tags" class = "btn btn-xs btn-warning">
        Show Tags
    </div>
    <span class = "hidebutton"> <a class = "btn btn-xs btn-primary" href = "/tag/tree/">Tree</a> <a class = "btn btn-xs btn-primary" href = "/tag/dynamic-programming/">Dynamic
            Programming</a> </span>
</div>
<div>
    <div id = "similar" class = "btn btn-xs btn-warning">
        Show Similar Problems
    </div>
    <span class = "hidebutton"> <a class = "btn btn-xs btn-primary" href = "/problems/unique-binary-search-trees/">
            (M) Unique
            Binary Search
            Trees</a> <a class = "btn btn-xs btn-primary" href = "/problems/different-ways-to-add-parentheses/">
            (M) Different Ways to Add
            Parentheses</a> </span>
</div>