<p></p>
<p>Given a non negative integer number <b>num</b>. For every numbers
    <b>i</b> in the range <b>0 ≤ i ≤ num</b> calculate
    the number of 1's in their binary representation and return them as an
    array.
</p>
<p><b>Example:</b><br> For <code>num = 5</code> you should return
    <code>[0,1,1,2,1,2]</code>.
</p>
<p><b>Follow up:</b></p>
<ul>
    <li>It is very easy to come up with a solution with run time <b>O(n*sizeof(integer))</b>.
        But can you do it in
        linear time <b>O(n)</b> /possibly in a single pass?
    </li>
    <li>Space complexity should be <b>O(n)</b>.</li>
    <li>Can you do it like a boss? Do it without using any builtin function like
        <b>__builtin_popcount</b> in c++ or in
        any other language.
    </li>
</ul>
<p></p>
<ol id = "hints">
    <li class = "hint">You should make use of what you have produced already.
    </li>
    <li class = "hint">Divide the numbers in ranges like [2-3], [4-7], [8-15]
        and so on. And try to generate new range
        from previous.
    </li>
    <li class = "hint">Or does the odd/even status of the number help you in
        calculating the number of 1s?
    </li>
</ol>
<p><b>Credits:</b><br>Special thanks to
    <a href = "https://leetcode.com/discuss/user/syedee">@ syedee </a> for
    adding this
    problem and creating all test cases.
</p>
<p></p>
<div>
    <p><a href = "/subscribe/">Subscribe</a> to see which companies asked this
        question
    </p>
</div>
<div>
    <div id = "tags" class = "btn btn-xs btn-warning">
        Show Tags
    </div>
    <span class = "hidebutton"> <a class = "btn btn-xs btn-primary" href = "/tag/dynamic-programming/">Dynamic
            Programming</a>
        <a class = "btn btn-xs btn-primary" href = "/tag/bit-manipulation/">Bit
            Manipulation</a> </span>
</div>
<div>
    <div id = "similar" class = "btn btn-xs btn-warning">
        Show Similar Problems
    </div>
    <span class = "hidebutton"> <a class = "btn btn-xs btn-primary" href = "/problems/number-of-1-bits/">
            (E) Number of 1
            Bits</a> </span>
</div>