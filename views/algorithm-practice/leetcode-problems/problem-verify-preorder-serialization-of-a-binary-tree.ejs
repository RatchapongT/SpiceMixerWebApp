<p></p>
<p>One way to serialize a binary tree is to use pre-order traversal. When
    we encounter a non-null node, we record the
    node's value. If it is a null node, we record using a sentinel value such as
    <code>#</code>.
</p>
<pre>
    _9_
    / \
    3 2
    / \ / \
    4 1 # 6
    / \ / \ / \
    # # # # # #
</pre>
<p>For example, the above binary tree can be serialized to the string
    <code>"9,3,4,#,#,1,#,#,2,#,6,#,#"</code>, where
    <code>#</code> represents a null node.
</p>
<p>Given a string of comma
    separated values, verify whether it is a correct preorder traversal
    serialization of a binary
    tree. Find an algorithm without reconstructing the tree.
</p>
<p>Each comma
    separated value in the string must be either an integer or a character
    <code>'#'</code> representing
    <code>null</code> pointer.
</p>
<p>You may assume that the input format is
    always valid, for example it could never contain two consecutive commas such
    as <code>"1,,3"</code>.
</p>
<p><strong>Example 1:</strong><br> <code>"9,3,4,#,#,1,#,#,2,#,6,#,#"</code><br>
    Return <code>true</code></p>
<p><strong>Example 2:</strong><br>
    <code>"1,#"</code><br> Return <code>false</code></p>
<p><strong>Example
        3:</strong><br> <code>"9,#,#,1"</code><br> Return <code>false</code></p>
<p><b>Credits:</b><br>Special thanks to
    <a href = "https://leetcode.com/discuss/user/dietpepsi">@dietpepsi</a> for
    adding
    this problem and creating all test cases.
</p>
<p></p>
<div>
    <p><a href = "/subscribe/">Subscribe</a> to see which companies asked this
        question
    </p>
</div>
<div>
    <div id = "tags" class = "btn btn-xs btn-warning">
        Show Tags
    </div>
    <span class = "hidebutton"> <a class = "btn btn-xs btn-primary" href = "/tag/stack/">Stack</a> </span>
</div>