<p></p>
<p>Write a program to find the node at which the intersection of two
    singly linked lists begins.
</p><br>
<p>For example, the following two linked
    lists:
</p>
<pre>
    A: a1 → a2
    ↘
    c1 → c2 → c3
    ↗
    B: b1 → b2 → b3
</pre>
<p>begin to intersect at node c1.</p><br>
<p><b>Notes:</b></p>
<ul>
    <li>If the two linked lists have no intersection at all, return
        <code>null</code>.
    </li>
    <li>The linked lists must retain their original structure after the function
        returns.
    </li>
    <li>You may assume there are no cycles anywhere in the entire linked
        structure.
    </li>
    <li>Your code should preferably run in O(n) time and use only O(1) memory.
    </li>
</ul>
<p></p>
<p><b>Credits:</b><br>Special thanks to
    <a href = "https://oj.leetcode.com/discuss/user/stellari">@stellari</a> for
    adding
    this problem and creating all test cases.
</p>
<p></p>
<div>
    <p><a href = "/subscribe/">Subscribe</a> to see which companies asked this
        question
    </p>
</div>
<div>
    <div id = "tags" class = "btn btn-xs btn-warning">
        Show Tags
    </div>
    <span class = "hidebutton"> <a class = "btn btn-xs btn-primary" href = "/tag/linked-list/">Linked
            List</a> </span>
</div>